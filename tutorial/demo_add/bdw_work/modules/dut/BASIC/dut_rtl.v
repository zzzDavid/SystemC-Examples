// Generated by stratus_hls 17.20-p100  (88533.190925)
// Fri Nov 20 12:05:36 2020
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_1_busy, din_1_vld, din_1_data, din_2_busy, din_2_vld, din_2_data, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_1_vld;
      input [7:0] din_1_data;
      input din_2_vld;
      input [7:0] din_2_data;
      input dout_busy;
      output din_1_busy;
      output din_2_busy;
      output dout_vld;
      output [8:0] dout_data;
      reg [8:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_4_17_out1;
      wire dut_Or_1Ux1U_1U_4_18_out1;
      reg dut_N_Muxb_1_2_0_4_2_out1;
      wire dut_And_1Ux1U_1U_4_13_out1;
      wire dut_Not_1U_1U_4_12_out1;
      reg din_2_m_unvalidated_req;
      wire dut_Or_1Ux1U_1U_4_10_out1;
      wire dut_And_1Ux1U_1U_4_11_out1;
      reg dut_N_Muxb_1_2_0_4_1_out1;
      wire dut_And_1Ux1U_1U_4_6_out1;
      wire dut_Not_1U_1U_4_5_out1;
      reg din_1_m_unvalidated_req;
      wire dut_Or_1Ux1U_1U_4_3_out1;
      wire dut_And_1Ux1U_1U_4_4_out1;
      reg[1:0] global_state_next;
      wire dut_Not_1U_1U_4_7_out1;
      wire dut_Not_1U_1U_4_14_out1;
      wire dut_And_1Ux1U_1U_4_19_out1;
      wire dut_Not_1U_1U_4_20_out1;
      reg dout_m_req_m_trig_req;
      reg din_2_m_busy_req_0;
      reg din_1_m_busy_req_0;
      wire[8:0] dut_Add_8Ux8U_9U_4_22_out1;
      reg[1:0] global_state;
      reg stall0;

         // resource: mux_9bx2i
         // resource: regr_9
         always @(posedge clk)
          begin :drive_dout_data
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd1: begin
                     dout_data <= {1'b0, din_1_data};
                  end
                  
                  2'd2: begin
                     dout_data <= dut_Add_8Ux8U_9U_4_22_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_1_m_busy_req_0
            if (rst == 1'b0) begin
               din_1_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     2'd0, 2'd3: begin
                        din_1_m_busy_req_0 <= 1'd0;
                     end
                     
                     2'd1: begin
                        din_1_m_busy_req_0 <= 1'd1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_2_m_busy_req_0
            if (rst == 1'b0) begin
               din_2_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     2'd1: begin
                        din_2_m_busy_req_0 <= 1'd0;
                     end
                     
                     2'd2: begin
                        din_2_m_busy_req_0 <= 1'd1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     2'd2: begin
                        dout_m_req_m_trig_req <= dut_Not_1U_1U_4_20_out1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx4i
         always @(dut_Not_1U_1U_4_7_out1 or dut_Not_1U_1U_4_14_out1 or dut_And_1Ux1U_1U_4_19_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               2'd1: begin
                  stall0 = dut_Not_1U_1U_4_7_out1;
               end
               
               2'd2: begin
                  stall0 = dut_Not_1U_1U_4_14_out1;
               end
               
               2'd3: begin
                  stall0 = dut_And_1Ux1U_1U_4_19_out1;
               end
               
               default: begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_22
         assign dut_Add_8Ux8U_9U_4_22_out1 = {1'b0, dout_data[7:0]} + {1'b0, din_2_data};

         // resource: regr_2
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 2'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  global_state <= global_state_next;
               end
            end
         end

         // resource: mux_2bx2i
         always @(global_state)
          begin :drive_global_state_next
            case (global_state) 

               2'd0, 2'd3: begin
                  global_state_next = 2'd1;
               end
               
               default: begin
                  global_state_next = global_state + 2'd1;
               end
               
            endcase

         end

         // thread: drive_din_1_busy
         assign din_1_busy = dut_And_1Ux1U_1U_4_4_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_3
         assign dut_Or_1Ux1U_1U_4_3_out1 = din_1_m_unvalidated_req | din_1_vld;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_4
         assign dut_And_1Ux1U_1U_4_4_out1 = dut_Or_1Ux1U_1U_4_3_out1 & din_1_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_5
         assign dut_Not_1U_1U_4_5_out1 = !dut_And_1Ux1U_1U_4_4_out1;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_6
         assign dut_And_1Ux1U_1U_4_6_out1 = dut_Not_1U_1U_4_5_out1 & din_1_vld;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_7
         assign dut_Not_1U_1U_4_7_out1 = !dut_And_1Ux1U_1U_4_6_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_1_m_unvalidated_req
            if (rst == 1'b0) begin
               din_1_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_1_m_unvalidated_req <= dut_N_Muxb_1_2_0_4_1_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_0_4
         always @(din_1_vld or din_1_m_busy_req_0 or din_1_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_0_4_1
            if (din_1_m_busy_req_0) begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_1_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_1_vld;
            end
         end

         // thread: drive_din_2_busy
         assign din_2_busy = dut_And_1Ux1U_1U_4_11_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_10
         assign dut_Or_1Ux1U_1U_4_10_out1 = din_2_m_unvalidated_req | din_2_vld;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_11
         assign dut_And_1Ux1U_1U_4_11_out1 = dut_Or_1Ux1U_1U_4_10_out1 & din_2_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_12
         assign dut_Not_1U_1U_4_12_out1 = !dut_And_1Ux1U_1U_4_11_out1;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_13
         assign dut_And_1Ux1U_1U_4_13_out1 = dut_Not_1U_1U_4_12_out1 & din_2_vld;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_14
         assign dut_Not_1U_1U_4_14_out1 = !dut_And_1Ux1U_1U_4_13_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_2_m_unvalidated_req
            if (rst == 1'b0) begin
               din_2_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_2_m_unvalidated_req <= dut_N_Muxb_1_2_0_4_2_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_0_4
         always @(din_2_vld or din_2_m_busy_req_0 or din_2_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_0_4_2
            if (din_2_m_busy_req_0) begin
               dut_N_Muxb_1_2_0_4_2_out1 = din_2_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_0_4_2_out1 = din_2_vld;
            end
         end

         // thread: drive_dout_vld
         assign dout_vld = dut_Or_1Ux1U_1U_4_18_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_18
         assign dut_Or_1Ux1U_1U_4_18_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_4_17_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= dut_And_1Ux1U_1U_4_19_out1;
            end
         end

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_19
         assign dut_And_1Ux1U_1U_4_19_out1 = dout_busy & dout_vld;

         // resource: dut_Xor_1Ux1U_1U_4  instance: dut_Xor_1Ux1U_1U_4_17
         assign dut_Xor_1Ux1U_1U_4_17_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_20
         assign dut_Not_1U_1U_4_20_out1 = !dout_m_req_m_trig_req;


endmodule

