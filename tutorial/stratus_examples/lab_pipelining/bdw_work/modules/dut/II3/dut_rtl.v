// Generated by stratus_hls 17.20-p100  (88533.190925)
// Thu Nov 19 00:46:16 2020
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data_a, din_data_b, din_data_c, din_data_d, din_data_e, din_data_f, din_data_g, din_data_h, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data_a;
      input [7:0] din_data_b;
      input [7:0] din_data_c;
      input [7:0] din_data_d;
      input [7:0] din_data_e;
      input [7:0] din_data_f;
      input [7:0] din_data_g;
      input [7:0] din_data_h;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [31:0] dout_data;
      reg [31:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_4_14_out1;
      wire dut_Or_1Ux1U_1U_4_15_out1;
      wire dut_And_1Ux1U_1U_4_12_out1;
      wire dut_And_1Ux1U_1U_4_10_out1;
      wire dut_Not_1U_1U_4_9_out1;
      wire dut_And_1Ux1U_1U_4_11_out1;
      reg dut_N_Muxb_1_2_1_4_1_out1;
      wire dut_And_1Ux1U_1U_4_5_out1;
      wire dut_Not_1U_1U_4_4_out1;
      wire dut_And_1Ux1U_1U_4_3_out1;
      reg din_m_unvalidated_req;
      wire dut_Or_1Ux1U_1U_4_2_out1;
      wire dut_Or_1Ux1U_1U_4_7_out1;
      reg[1:0] global_state_next;
      wire dut_Or_1Ux1U_1U_4_6_out1;
      wire[15:0] dut_Mul_8Ux8U_16U_4_35_out1;
      reg[7:0] dut_Mul_8Ux8U_16U_4_35_in1;
      reg[7:0] dut_Mul_8Ux8U_16U_4_35_in2;
      reg[8:0] dut_Mul_32Ux9U_32U_4_34_in1;
      wire[8:0] dut_Add_8Ux8U_9U_4_38_out1;
      reg[31:0] dut_Mul_32Ux9U_32U_4_34_in2;
      reg gs_ctrl2;
      reg[31:0] dut_Mul_33Ux32U_64U_4_33_in1;
      wire[31:0] dut_Add_32Ux32U_32U_4_44_out1;
      reg[32:0] dut_Mul_33Ux32U_64U_4_33_in2;
      wire[32:0] dut_Add_32Ux16U_33U_4_45_out1;
      wire[31:0] dut_Mul_32Ux10U_32U_4_32_out1;
      reg[9:0] dut_Mul_32Ux10U_32U_4_32_in1;
      reg[31:0] dut_Mul_32Ux10U_32U_4_32_in2;
      wire[32:0] dut_Add_32Ux17U_33U_4_41_out1;
      reg gs_ctrl0;
      wire[8:0] dut_Add_8Ux8U_9U_4_31_out1;
      wire[9:0] dut_Add_9Ux8U_10U_4_30_out1;
      wire[9:0] dut_Add_9Ux8U_10U_4_29_out1;
      reg[7:0] din_m_stall_reg_h;
      reg[7:0] din_m_stall_reg_g;
      wire[8:0] dut_Add_8Ux8U_9U_4_26_out1;
      wire[8:0] dut_Add_8Ux8U_9U_4_25_out1;
      reg[7:0] dut_N_Mux_8_2_0_4_24_out1;
      reg[7:0] din_m_stall_reg_f;
      reg[7:0] din_m_stall_reg_c;
      reg[7:0] din_m_stall_reg_e;
      reg[7:0] din_m_stall_reg_d;
      reg[7:0] din_m_stall_reg_b;
      reg[7:0] din_m_stall_reg_a;
      reg din_m_stall_reg_full;
      wire[63:0] dut_Mul_33Ux32U_64U_4_33_out1;
      wire[31:0] dut_Mul_32Ux9U_32U_4_34_out1;
      reg[31:0] s_reg_29;
      reg[7:0] dut_N_Mux_8_2_0_4_28_out1;
      reg[7:0] s_reg_28;
      reg[7:0] dut_N_Mux_8_2_0_4_27_out1;
      reg[7:0] s_reg_27;
      reg[7:0] dut_N_Mux_8_2_0_4_23_out1;
      reg[7:0] s_reg_26;
      reg[7:0] dut_N_Mux_8_2_0_4_22_out1;
      reg[7:0] s_reg_25;
      reg[7:0] dut_N_Mux_8_2_0_4_21_out1;
      reg[7:0] s_reg_24;
      wire[16:0] dut_Add_16Ux16U_17U_4_36_out1;
      reg[7:0] dut_N_Mux_8_2_0_4_20_out1;
      reg[16:0] s_reg_23;
      wire[8:0] dut_Add_8Ux8U_9U_4_39_out1;
      reg[7:0] dut_N_Mux_8_2_0_4_19_out1;
      reg[8:0] s_reg_22;
      reg s_reg_21_stage0;
      wire dut_And_1Ux1U_1U_4_16_out1;
      reg cycle6_state;
      wire dut_Not_1U_1U_4_17_out1;
      reg cycle3_state;
      reg s_reg_21;
      reg dout_m_req_m_trig_req;
      reg[1:0] global_state;
      reg din_m_busy_req_0;
      reg[63:0] s_reg_30;
      wire[1:0] dut_Div_64Ux2U_32U_4_47_in1;
      wire[31:0] dut_Div_64Ux2U_32U_4_47_out1;
      reg stall0;

         dut_Div_64Ux2U_32U_4 dut_Div_64Ux2U_32U_4_47(
                                .in2( s_reg_30 ),
                                .in1( dut_Div_64Ux2U_32U_4_47_in1 ),
                                .out1( dut_Div_64Ux2U_32U_4_47_out1 ),
                                .clk( clk ),
                                .stall( stall0 )
                              );

         // resource: regr_32
         always @(posedge clk)
          begin :drive_dout_data
            if (stall0) begin
            end
            else begin
               dout_data <= dut_Div_64Ux2U_32U_4_47_out1;
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     2'd1: begin
                        din_m_busy_req_0 <= 1'd0;
                     end
                     
                     2'd2: begin
                        din_m_busy_req_0 <= 1'd1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     2'd3: begin
                        if (!cycle3_state && s_reg_21) begin
                           dout_m_req_m_trig_req <= dut_Not_1U_1U_4_17_out1;
                        end
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         always @(dut_And_1Ux1U_1U_4_16_out1 or cycle6_state or global_state)
          begin :drive_stall0
            case (global_state) 

               2'd1: begin
                  if (cycle6_state) begin
                     stall0 = 1'b0;
                  end
                  else begin
                     stall0 = dut_And_1Ux1U_1U_4_16_out1;
                  end
               end
               
               default: begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_21
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd1: begin
                     if (cycle3_state) begin
                     end
                     else begin
                        s_reg_21 <= s_reg_21_stage0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_9bx2i
         // resource: regr_9
         always @(posedge clk)
          begin :drive_s_reg_22
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd2: begin
                     s_reg_22 <= {1'b0, dut_N_Mux_8_2_0_4_19_out1};
                  end
                  
                  2'd3: begin
                     s_reg_22 <= dut_Add_8Ux8U_9U_4_39_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_17bx2i
         // resource: regr_17
         always @(posedge clk)
          begin :drive_s_reg_23
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd2: begin
                     s_reg_23 <= {9'b000000000, dut_N_Mux_8_2_0_4_20_out1};
                  end
                  
                  2'd3: begin
                     s_reg_23 <= dut_Add_16Ux16U_17U_4_36_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_24
            if (stall0) begin
            end
            else begin
               s_reg_24 <= dut_N_Mux_8_2_0_4_21_out1;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_25
            if (stall0) begin
            end
            else begin
               s_reg_25 <= dut_N_Mux_8_2_0_4_22_out1;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_26
            if (stall0) begin
            end
            else begin
               s_reg_26 <= dut_N_Mux_8_2_0_4_23_out1;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_27
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd2: begin
                     s_reg_27 <= dut_N_Mux_8_2_0_4_27_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_28
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd2: begin
                     s_reg_28 <= dut_N_Mux_8_2_0_4_28_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_29
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd2: begin
                     s_reg_29 <= {16'b0000000000000000, dut_Mul_32Ux9U_32U_4_34_out1[15:0]};
                  end
                  
                  2'd3: begin
                     s_reg_29 <= dut_Mul_32Ux9U_32U_4_34_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_64bx3i
         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_30
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd1: begin
                     if (cycle3_state) begin
                     end
                     else begin
                        s_reg_30 <= dut_Mul_33Ux32U_64U_4_33_out1;
                     end
                  end
                  
                  2'd2: begin
                     s_reg_30 <= {35'b00000000000000000000000000000000000, dut_Mul_33Ux32U_64U_4_33_out1[28:0]};
                  end
                  
                  2'd3: begin
                     s_reg_30 <= {32'b00000000000000000000000000000000, dut_Mul_33Ux32U_64U_4_33_out1[31:0]};
                  end
                  
               endcase

            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_a or din_m_stall_reg_a or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_19
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_19_out1 = din_m_stall_reg_a;
            end
            else begin
               dut_N_Mux_8_2_0_4_19_out1 = din_data_a;
            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_b or din_m_stall_reg_b or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_20
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_20_out1 = din_m_stall_reg_b;
            end
            else begin
               dut_N_Mux_8_2_0_4_20_out1 = din_data_b;
            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_d or din_m_stall_reg_d or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_21
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_21_out1 = din_m_stall_reg_d;
            end
            else begin
               dut_N_Mux_8_2_0_4_21_out1 = din_data_d;
            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_e or din_m_stall_reg_e or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_22
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_22_out1 = din_m_stall_reg_e;
            end
            else begin
               dut_N_Mux_8_2_0_4_22_out1 = din_data_e;
            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_c or din_m_stall_reg_c or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_23
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_23_out1 = din_m_stall_reg_c;
            end
            else begin
               dut_N_Mux_8_2_0_4_23_out1 = din_data_c;
            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_f or din_m_stall_reg_f or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_24
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_24_out1 = din_m_stall_reg_f;
            end
            else begin
               dut_N_Mux_8_2_0_4_24_out1 = din_data_f;
            end
         end

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_25
         assign dut_Add_8Ux8U_9U_4_25_out1 = {1'b0, dut_N_Mux_8_2_0_4_21_out1} + {1'b0, dut_N_Mux_8_2_0_4_22_out1};

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_26
         assign dut_Add_8Ux8U_9U_4_26_out1 = {1'b0, dut_N_Mux_8_2_0_4_19_out1} + {1'b0, dut_N_Mux_8_2_0_4_20_out1};

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_g or din_m_stall_reg_g or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_27
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_27_out1 = din_m_stall_reg_g;
            end
            else begin
               dut_N_Mux_8_2_0_4_27_out1 = din_data_g;
            end
         end

         // resource:dut_N_Mux_8_2_0_4
         always @(din_data_h or din_m_stall_reg_h or din_m_stall_reg_full)
          begin :dut_N_Mux_8_2_0_4_28
            if (din_m_stall_reg_full) begin
               dut_N_Mux_8_2_0_4_28_out1 = din_m_stall_reg_h;
            end
            else begin
               dut_N_Mux_8_2_0_4_28_out1 = din_data_h;
            end
         end

         // resource: dut_Add_9Ux8U_10U_4  instance: dut_Add_9Ux8U_10U_4_29
         assign dut_Add_9Ux8U_10U_4_29_out1 = {1'b0, dut_Add_8Ux8U_9U_4_25_out1} + {2'b00, dut_N_Mux_8_2_0_4_24_out1};

         // resource: dut_Add_9Ux8U_10U_4  instance: dut_Add_9Ux8U_10U_4_30
         assign dut_Add_9Ux8U_10U_4_30_out1 = {1'b0, dut_Add_8Ux8U_9U_4_26_out1} + {2'b00, dut_N_Mux_8_2_0_4_23_out1};

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_31
         assign dut_Add_8Ux8U_9U_4_31_out1 = {1'b0, dut_N_Mux_8_2_0_4_27_out1} + {1'b0, dut_N_Mux_8_2_0_4_28_out1};

         // resource: mux_32bx2i
         always @(dut_Add_9Ux8U_10U_4_30_out1 or dut_Add_32Ux17U_33U_4_41_out1[31:0] or gs_ctrl0)
          begin :drive_dut_Mul_32Ux10U_32U_4_32_in2
            if (gs_ctrl0) begin
               dut_Mul_32Ux10U_32U_4_32_in2 = {22'b0000000000000000000000, dut_Add_9Ux8U_10U_4_30_out1};
            end
            else begin
               dut_Mul_32Ux10U_32U_4_32_in2 = dut_Add_32Ux17U_33U_4_41_out1[31:0];
            end
         end

         // resource: mux_10bx2i
         always @(s_reg_22 or dut_Add_9Ux8U_10U_4_29_out1 or gs_ctrl0)
          begin :drive_dut_Mul_32Ux10U_32U_4_32_in1
            if (gs_ctrl0) begin
               dut_Mul_32Ux10U_32U_4_32_in1 = dut_Add_9Ux8U_10U_4_29_out1;
            end
            else begin
               dut_Mul_32Ux10U_32U_4_32_in1 = {1'b0, s_reg_22};
            end
         end

         // resource: dut_Mul_32Ux10U_32U_4  instance: dut_Mul_32Ux10U_32U_4_32
         assign dut_Mul_32Ux10U_32U_4_32_out1 = dut_Mul_32Ux10U_32U_4_32_in2*{22'b0000000000000000000000, dut_Mul_32Ux10U_32U_4_32_in1};

         // resource: mux_33bx3i
         always @(s_reg_30[32:0] or dut_Mul_32Ux10U_32U_4_32_out1[19:0] or dut_Add_32Ux16U_33U_4_45_out1 or global_state)
          begin :drive_dut_Mul_33Ux32U_64U_4_33_in2
            case (global_state) 

               2'd2: begin
                  dut_Mul_33Ux32U_64U_4_33_in2 = {13'b0000000000000, dut_Mul_32Ux10U_32U_4_32_out1[19:0]};
               end
               
               2'd3: begin
                  dut_Mul_33Ux32U_64U_4_33_in2 = s_reg_30[32:0];
               end
               
               default: begin
                  dut_Mul_33Ux32U_64U_4_33_in2 = dut_Add_32Ux16U_33U_4_45_out1;
               end
               
            endcase

         end

         // resource: mux_32bx3i
         always @(s_reg_25 or dut_Add_8Ux8U_9U_4_31_out1 or dut_Add_32Ux32U_32U_4_44_out1 or global_state)
          begin :drive_dut_Mul_33Ux32U_64U_4_33_in1
            case (global_state) 

               2'd2: begin
                  dut_Mul_33Ux32U_64U_4_33_in1 = {23'b00000000000000000000000, dut_Add_8Ux8U_9U_4_31_out1};
               end
               
               2'd3: begin
                  dut_Mul_33Ux32U_64U_4_33_in1 = {24'b000000000000000000000000, s_reg_25};
               end
               
               default: begin
                  dut_Mul_33Ux32U_64U_4_33_in1 = dut_Add_32Ux32U_32U_4_44_out1;
               end
               
            endcase

         end

         // resource: dut_Mul_33Ux32U_64U_4  instance: dut_Mul_33Ux32U_64U_4_33
         assign dut_Mul_33Ux32U_64U_4_33_out1 = {31'b0000000000000000000000000000000, dut_Mul_33Ux32U_64U_4_33_in2}*{32'b00000000000000000000000000000000, dut_Mul_33Ux32U_64U_4_33_in1};

         // resource: mux_32bx2i
         always @(s_reg_30[31:0] or dut_N_Mux_8_2_0_4_23_out1 or gs_ctrl2)
          begin :drive_dut_Mul_32Ux9U_32U_4_34_in2
            if (gs_ctrl2) begin
               dut_Mul_32Ux9U_32U_4_34_in2 = s_reg_30[31:0];
            end
            else begin
               dut_Mul_32Ux9U_32U_4_34_in2 = {24'b000000000000000000000000, dut_N_Mux_8_2_0_4_23_out1};
            end
         end

         // resource: mux_9bx2i
         always @(dut_N_Mux_8_2_0_4_21_out1 or dut_Add_8Ux8U_9U_4_38_out1 or gs_ctrl2)
          begin :drive_dut_Mul_32Ux9U_32U_4_34_in1
            if (gs_ctrl2) begin
               dut_Mul_32Ux9U_32U_4_34_in1 = dut_Add_8Ux8U_9U_4_38_out1;
            end
            else begin
               dut_Mul_32Ux9U_32U_4_34_in1 = {1'b0, dut_N_Mux_8_2_0_4_21_out1};
            end
         end

         // resource: dut_Mul_32Ux9U_32U_4  instance: dut_Mul_32Ux9U_32U_4_34
         assign dut_Mul_32Ux9U_32U_4_34_out1 = dut_Mul_32Ux9U_32U_4_34_in2*{23'b00000000000000000000000, dut_Mul_32Ux9U_32U_4_34_in1};

         // resource: mux_8bx2i
         always @(s_reg_22[7:0] or s_reg_27 or gs_ctrl2)
          begin :drive_dut_Mul_8Ux8U_16U_4_35_in2
            if (gs_ctrl2) begin
               dut_Mul_8Ux8U_16U_4_35_in2 = s_reg_22[7:0];
            end
            else begin
               dut_Mul_8Ux8U_16U_4_35_in2 = s_reg_27;
            end
         end

         // resource: mux_8bx2i
         always @(s_reg_23[7:0] or s_reg_28 or gs_ctrl2)
          begin :drive_dut_Mul_8Ux8U_16U_4_35_in1
            if (gs_ctrl2) begin
               dut_Mul_8Ux8U_16U_4_35_in1 = s_reg_23[7:0];
            end
            else begin
               dut_Mul_8Ux8U_16U_4_35_in1 = s_reg_28;
            end
         end

         // resource: dut_Mul_8Ux8U_16U_4  instance: dut_Mul_8Ux8U_16U_4_35
         assign dut_Mul_8Ux8U_16U_4_35_out1 = {8'b00000000, dut_Mul_8Ux8U_16U_4_35_in2}*{8'b00000000, dut_Mul_8Ux8U_16U_4_35_in1};

         // resource: dut_Add_16Ux16U_17U_4  instance: dut_Add_16Ux16U_17U_4_36
         assign dut_Add_16Ux16U_17U_4_36_out1 = {1'b0, dut_Mul_8Ux8U_16U_4_35_out1} + {1'b0, s_reg_29[15:0]};

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_38
         assign dut_Add_8Ux8U_9U_4_38_out1 = {1'b0, s_reg_24} + {1'b0, s_reg_26};

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_39
         assign dut_Add_8Ux8U_9U_4_39_out1 = {1'b0, s_reg_22[7:0]} + {1'b0, s_reg_23[7:0]};

         // resource: dut_Add_32Ux17U_33U_4  instance: dut_Add_32Ux17U_33U_4_41
         assign dut_Add_32Ux17U_33U_4_41_out1 = {1'b0, s_reg_30[31:0]} + {16'b0000000000000000, s_reg_23};

         // resource: dut_Add_32Ux32U_32U_4  instance: dut_Add_32Ux32U_32U_4_44
         assign dut_Add_32Ux32U_32U_4_44_out1 = dut_Mul_32Ux10U_32U_4_32_out1 + s_reg_29;

         // resource: dut_Add_32Ux16U_33U_4  instance: dut_Add_32Ux16U_33U_4_45
         assign dut_Add_32Ux16U_33U_4_45_out1 = {1'b0, dut_Add_32Ux17U_33U_4_41_out1[31:0]} + {17'b00000000000000000, dut_Mul_8Ux8U_16U_4_35_out1};

         // thread: drive_dut_Div_64Ux2U_32U_4_47_in1
         assign dut_Div_64Ux2U_32U_4_47_in1 = 2'd3;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_21_stage0
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd2: begin
                     s_reg_21_stage0 <= dut_Or_1Ux1U_1U_4_6_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_cycle3_state
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd0: begin
                     cycle3_state <= 1'b1;
                  end
                  
                  2'd3: begin
                     cycle3_state <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_cycle6_state
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  2'd0: begin
                     cycle6_state <= 1'b1;
                  end
                  
                  2'd3: begin
                     cycle6_state <= cycle3_state;
                  end
                  
               endcase

            end
         end

         // resource: regr_2
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 2'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  global_state <= global_state_next;
               end
            end
         end

         // resource: mux_2bx2i
         always @(global_state)
          begin :drive_global_state_next
            case (global_state) 

               2'd0, 2'd3: begin
                  global_state_next = 2'd1;
               end
               
               default: begin
                  global_state_next = global_state + 2'd1;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     2'd2: begin
                        gs_ctrl0 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl0 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl2
            if (rst == 1'b0) begin
               gs_ctrl2 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     2'd3: begin
                        gs_ctrl2 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl2 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // thread: drive_din_busy
         assign din_busy = dut_Or_1Ux1U_1U_4_7_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_2
         assign dut_Or_1Ux1U_1U_4_2_out1 = din_m_unvalidated_req | din_vld;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_3
         assign dut_And_1Ux1U_1U_4_3_out1 = dut_Or_1Ux1U_1U_4_2_out1 & din_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_4
         assign dut_Not_1U_1U_4_4_out1 = !dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_5
         assign dut_And_1Ux1U_1U_4_5_out1 = dut_Not_1U_1U_4_4_out1 & din_vld;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_6
         assign dut_Or_1Ux1U_1U_4_6_out1 = dut_And_1Ux1U_1U_4_5_out1 | din_m_stall_reg_full;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_7
         assign dut_Or_1Ux1U_1U_4_7_out1 = dut_And_1Ux1U_1U_4_3_out1 | din_m_stall_reg_full;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_m_unvalidated_req <= dut_N_Muxb_1_2_1_4_1_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_1_4
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_1_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_1_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_1_4_1_out1 = din_vld;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_h
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_h <= din_data_h;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_g
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_g <= din_data_g;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_f
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_f <= din_data_f;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_e
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_e <= din_data_e;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_d
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_d <= din_data_d;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_c
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_c <= din_data_c;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_b
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_b <= din_data_b;
            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_din_m_stall_reg_a
            if (dut_And_1Ux1U_1U_4_11_out1) begin
               din_m_stall_reg_a <= din_data_a;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_9
         assign dut_Not_1U_1U_4_9_out1 = !din_m_stall_reg_full;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_10
         assign dut_And_1Ux1U_1U_4_10_out1 = dut_Or_1Ux1U_1U_4_6_out1 & stall0;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_11
         assign dut_And_1Ux1U_1U_4_11_out1 = dut_And_1Ux1U_1U_4_10_out1 & dut_Not_1U_1U_4_9_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_stall_reg_full
            if (rst == 1'b0) begin
               din_m_stall_reg_full <= 1'd0;
            end
            else begin
               din_m_stall_reg_full <= dut_And_1Ux1U_1U_4_12_out1;
            end
         end

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_12
         assign dut_And_1Ux1U_1U_4_12_out1 = dut_Or_1Ux1U_1U_4_6_out1 & stall0;

         // thread: drive_dout_vld
         assign dout_vld = dut_Or_1Ux1U_1U_4_15_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_15
         assign dut_Or_1Ux1U_1U_4_15_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_4_14_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= dut_And_1Ux1U_1U_4_16_out1;
            end
         end

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_16
         assign dut_And_1Ux1U_1U_4_16_out1 = dout_busy & dout_vld;

         // resource: dut_Xor_1Ux1U_1U_4  instance: dut_Xor_1Ux1U_1U_4_14
         assign dut_Xor_1Ux1U_1U_4_14_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_17
         assign dut_Not_1U_1U_4_17_out1 = !dout_m_req_m_trig_req;


endmodule

