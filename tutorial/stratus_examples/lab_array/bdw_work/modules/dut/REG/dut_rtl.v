// Generated by stratus_hls 17.20-p100  (88533.190925)
// Tue Nov 17 14:06:24 2020
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [10:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_4_9_out1;
      wire dut_Or_1U_0_4_10_out1;
      reg dut_N_Muxb_1_2_7_4_1_out1;
      wire dut_And_1U_3_4_5_out1;
      wire dut_Not_1U_1U_4_4_out1;
      reg din_m_unvalidated_req;
      wire dut_Or_1U_0_4_2_out1;
      wire dut_And_1U_3_4_3_out1;
      reg[2:0] global_state_next;
      reg[5:0] s_reg_5;
      wire[5:0] dut_Add_6Ux1U_6U_4_15_out1;
      reg gs_ctrl3;
      reg[5:0] in1_raddr_wire;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r0_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r1_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r2_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r3_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r4_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r5_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r6_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r7_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r8_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r9_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r10_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r11_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r12_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r13_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r14_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r15_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r16_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r17_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r18_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r19_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r20_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r21_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r22_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r23_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r24_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r25_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r26_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r27_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r28_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r29_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r30_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r31_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r32_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r33_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r34_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r35_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r36_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r37_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r38_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r39_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r40_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r41_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r42_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r43_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r44_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r45_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r46_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r47_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r48_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r49_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r50_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r51_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r52_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r53_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r54_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r55_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r56_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r57_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r58_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r59_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r60_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r61_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r62_slice;
      /*signed*/reg[6:0] mem_inst_dut_mem_regbank_r63_slice;
      reg[5:0] in2_waddr_wire;
      /*signed*/reg[6:0] in1_din_wire;
      reg gs_ctrl1;
      reg mem_if_1_wen0_wire;
      reg gs_ctrl0;
      wire dut_Not_1U_1U_4_6_out1;
      wire dut_And_1U_3_4_11_out1;
      wire dut_Not_1U_1U_4_12_out1;
      reg dout_m_req_m_trig_req;
      wire dut_LessThan_8Sx8S_1U_4_14_out1;
      reg din_m_busy_req_0;
      wire[8:0] dut_Add_8Ux8U_9U_4_16_out1;
      /*signed*/reg[6:0] mem_if_2_dout_wire_slice;
      /*signed*/wire[7:0] dut_Add_7Sx2S_8S_4_13_out1;
      /*signed*/reg[9:0] dout_data_slice;
      reg[2:0] global_state;
      reg stall0;

         // resource: mux_10bx3i
         // resource: regr_10
         always @(posedge clk)
          begin :drive_dout_data
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd0, 3'd1: begin
                     dout_data_slice <= {{ 2 {dut_Add_7Sx2S_8S_4_13_out1[7]}}, dut_Add_7Sx2S_8S_4_13_out1};
                  end
                  
                  3'd2: begin
                     dout_data_slice <= {{2'b00, mem_if_2_dout_wire_slice[6]}, mem_if_2_dout_wire_slice};
                  end
                  
                  3'd3: begin
                     dout_data_slice <= {1'b0, dut_Add_8Ux8U_9U_4_16_out1};
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     3'd0, 3'd1: begin
                        if (dut_LessThan_8Sx8S_1U_4_14_out1) begin
                        end
                        else begin
                           din_m_busy_req_0 <= 1'd0;
                        end
                     end
                     
                     3'd2: begin
                        din_m_busy_req_0 <= 1'd1;
                     end
                     
                     3'd4: begin
                        din_m_busy_req_0 <= 1'd0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     3'd3: begin
                        dout_m_req_m_trig_req <= dut_Not_1U_1U_4_12_out1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx3i
         always @(dut_Not_1U_1U_4_6_out1 or dut_And_1U_3_4_11_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               3'd2: begin
                  stall0 = dut_Not_1U_1U_4_6_out1;
               end
               
               3'd4: begin
                  stall0 = dut_And_1U_3_4_11_out1;
               end
               
               default: begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         always @(stall0 or gs_ctrl0)
          begin :drive_mem_if_1_wen0_wire
            if (stall0) begin
               mem_if_1_wen0_wire = 1'b0;
            end
            else begin
               if (gs_ctrl0) begin
                  mem_if_1_wen0_wire = 1'b1;
               end
               else begin
                  mem_if_1_wen0_wire = 1'b0;
               end
            end
         end

         // resource: mux_7bx2i
         always @(gs_ctrl1 or dout_data_slice[6:0])
          begin :drive_in1_din_wire
            if (gs_ctrl1) begin
               in1_din_wire = dout_data_slice[6:0];
            end
            else begin
               in1_din_wire = 7'd000;
            end
         end

         // resource: mux_6bx2i
         always @(gs_ctrl1 or dout_data_slice[5:0])
          begin :drive_in2_waddr_wire
            if (gs_ctrl1) begin
               in2_waddr_wire = dout_data_slice[5:0];
            end
            else begin
               in2_waddr_wire = 6'd00;
            end
         end

         // resource:dut_mem_regbank
         always @(in1_raddr_wire or mem_inst_dut_mem_regbank_r0_slice or mem_inst_dut_mem_regbank_r1_slice or mem_inst_dut_mem_regbank_r2_slice or mem_inst_dut_mem_regbank_r3_slice or mem_inst_dut_mem_regbank_r4_slice or mem_inst_dut_mem_regbank_r5_slice or mem_inst_dut_mem_regbank_r6_slice or mem_inst_dut_mem_regbank_r7_slice or mem_inst_dut_mem_regbank_r8_slice or mem_inst_dut_mem_regbank_r9_slice or mem_inst_dut_mem_regbank_r10_slice or mem_inst_dut_mem_regbank_r11_slice or 
mem_inst_dut_mem_regbank_r12_slice
          or mem_inst_dut_mem_regbank_r13_slice or mem_inst_dut_mem_regbank_r14_slice or mem_inst_dut_mem_regbank_r15_slice or mem_inst_dut_mem_regbank_r16_slice or mem_inst_dut_mem_regbank_r17_slice or mem_inst_dut_mem_regbank_r18_slice or mem_inst_dut_mem_regbank_r19_slice or mem_inst_dut_mem_regbank_r20_slice or mem_inst_dut_mem_regbank_r21_slice or mem_inst_dut_mem_regbank_r22_slice or mem_inst_dut_mem_regbank_r23_slice or mem_inst_dut_mem_regbank_r24_slice or 
mem_inst_dut_mem_regbank_r25_slice
          or mem_inst_dut_mem_regbank_r26_slice or mem_inst_dut_mem_regbank_r27_slice or mem_inst_dut_mem_regbank_r28_slice or mem_inst_dut_mem_regbank_r29_slice or mem_inst_dut_mem_regbank_r30_slice or mem_inst_dut_mem_regbank_r31_slice or mem_inst_dut_mem_regbank_r32_slice or mem_inst_dut_mem_regbank_r33_slice or mem_inst_dut_mem_regbank_r34_slice or mem_inst_dut_mem_regbank_r35_slice or mem_inst_dut_mem_regbank_r36_slice or mem_inst_dut_mem_regbank_r37_slice or 
mem_inst_dut_mem_regbank_r38_slice
          or mem_inst_dut_mem_regbank_r39_slice or mem_inst_dut_mem_regbank_r40_slice or mem_inst_dut_mem_regbank_r41_slice or mem_inst_dut_mem_regbank_r42_slice or mem_inst_dut_mem_regbank_r43_slice or mem_inst_dut_mem_regbank_r44_slice or mem_inst_dut_mem_regbank_r45_slice or mem_inst_dut_mem_regbank_r46_slice or mem_inst_dut_mem_regbank_r47_slice or mem_inst_dut_mem_regbank_r48_slice or mem_inst_dut_mem_regbank_r49_slice or mem_inst_dut_mem_regbank_r50_slice or 
mem_inst_dut_mem_regbank_r51_slice
          or mem_inst_dut_mem_regbank_r52_slice or mem_inst_dut_mem_regbank_r53_slice or mem_inst_dut_mem_regbank_r54_slice or mem_inst_dut_mem_regbank_r55_slice or mem_inst_dut_mem_regbank_r56_slice or mem_inst_dut_mem_regbank_r57_slice or mem_inst_dut_mem_regbank_r58_slice or mem_inst_dut_mem_regbank_r59_slice or mem_inst_dut_mem_regbank_r60_slice or mem_inst_dut_mem_regbank_r61_slice or mem_inst_dut_mem_regbank_r62_slice or mem_inst_dut_mem_regbank_r63_slice)
          begin :mem_inst
            case (in1_raddr_wire) 

               6'd00: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r0_slice;
               end
               
               6'd01: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r1_slice;
               end
               
               6'd02: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r2_slice;
               end
               
               6'd03: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r3_slice;
               end
               
               6'd04: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r4_slice;
               end
               
               6'd05: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r5_slice;
               end
               
               6'd06: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r6_slice;
               end
               
               6'd07: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r7_slice;
               end
               
               6'd08: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r8_slice;
               end
               
               6'd09: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r9_slice;
               end
               
               6'd10: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r10_slice;
               end
               
               6'd11: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r11_slice;
               end
               
               6'd12: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r12_slice;
               end
               
               6'd13: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r13_slice;
               end
               
               6'd14: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r14_slice;
               end
               
               6'd15: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r15_slice;
               end
               
               6'd16: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r16_slice;
               end
               
               6'd17: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r17_slice;
               end
               
               6'd18: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r18_slice;
               end
               
               6'd19: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r19_slice;
               end
               
               6'd20: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r20_slice;
               end
               
               6'd21: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r21_slice;
               end
               
               6'd22: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r22_slice;
               end
               
               6'd23: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r23_slice;
               end
               
               6'd24: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r24_slice;
               end
               
               6'd25: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r25_slice;
               end
               
               6'd26: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r26_slice;
               end
               
               6'd27: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r27_slice;
               end
               
               6'd28: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r28_slice;
               end
               
               6'd29: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r29_slice;
               end
               
               6'd30: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r30_slice;
               end
               
               6'd31: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r31_slice;
               end
               
               6'd32: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r32_slice;
               end
               
               6'd33: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r33_slice;
               end
               
               6'd34: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r34_slice;
               end
               
               6'd35: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r35_slice;
               end
               
               6'd36: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r36_slice;
               end
               
               6'd37: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r37_slice;
               end
               
               6'd38: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r38_slice;
               end
               
               6'd39: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r39_slice;
               end
               
               6'd40: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r40_slice;
               end
               
               6'd41: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r41_slice;
               end
               
               6'd42: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r42_slice;
               end
               
               6'd43: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r43_slice;
               end
               
               6'd44: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r44_slice;
               end
               
               6'd45: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r45_slice;
               end
               
               6'd46: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r46_slice;
               end
               
               6'd47: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r47_slice;
               end
               
               6'd48: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r48_slice;
               end
               
               6'd49: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r49_slice;
               end
               
               6'd50: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r50_slice;
               end
               
               6'd51: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r51_slice;
               end
               
               6'd52: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r52_slice;
               end
               
               6'd53: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r53_slice;
               end
               
               6'd54: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r54_slice;
               end
               
               6'd55: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r55_slice;
               end
               
               6'd56: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r56_slice;
               end
               
               6'd57: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r57_slice;
               end
               
               6'd58: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r58_slice;
               end
               
               6'd59: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r59_slice;
               end
               
               6'd60: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r60_slice;
               end
               
               6'd61: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r61_slice;
               end
               
               6'd62: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r62_slice;
               end
               
               6'd63: begin
                  mem_if_2_dout_wire_slice = mem_inst_dut_mem_regbank_r63_slice;
               end
               
            endcase

         end

         // resource: mux_6bx2i
         always @(s_reg_5 or dut_Add_6Ux1U_6U_4_15_out1 or gs_ctrl3)
          begin :drive_in1_raddr_wire
            if (gs_ctrl3) begin
               in1_raddr_wire = s_reg_5;
            end
            else begin
               in1_raddr_wire = dut_Add_6Ux1U_6U_4_15_out1;
            end
         end

         // resource: regr_6
         always @(posedge clk)
          begin :drive_s_reg_5
            if (stall0) begin
            end
            else begin
               s_reg_5 <= din_data[5:0];
            end
         end

         // resource: dut_Add_7Sx2S_8S_4  instance: dut_Add_7Sx2S_8S_4_13
         assign dut_Add_7Sx2S_8S_4_13_out1 = {in1_din_wire[6], in1_din_wire} + 8'd001;

         // resource: dut_LessThan_8Sx8S_1U_4  instance: dut_LessThan_8Sx8S_1U_4_14
         assign dut_LessThan_8Sx8S_1U_4_14_out1 = dut_Add_7Sx2S_8S_4_13_out1[7] ^ dut_Add_7Sx2S_8S_4_13_out1 < 8'd064;

         // resource: dut_Add_6Ux1U_6U_4  instance: dut_Add_6Ux1U_6U_4_15
         assign dut_Add_6Ux1U_6U_4_15_out1 = din_data[5:0] + 6'd01;

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_16
         assign dut_Add_8Ux8U_9U_4_16_out1 = {{1'b0, mem_if_2_dout_wire_slice[6]}, mem_if_2_dout_wire_slice} + {1'b0, dout_data_slice[7:0]};

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r0
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r0_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && !((|in2_waddr_wire))) begin
                  mem_inst_dut_mem_regbank_r0_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r1
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r1_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd01) begin
                  mem_inst_dut_mem_regbank_r1_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r2
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r2_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd02) begin
                  mem_inst_dut_mem_regbank_r2_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r3
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r3_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd03) begin
                  mem_inst_dut_mem_regbank_r3_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r4
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r4_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd04) begin
                  mem_inst_dut_mem_regbank_r4_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r5
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r5_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd05) begin
                  mem_inst_dut_mem_regbank_r5_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r6
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r6_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd06) begin
                  mem_inst_dut_mem_regbank_r6_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r7
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r7_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd07) begin
                  mem_inst_dut_mem_regbank_r7_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r8
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r8_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd08) begin
                  mem_inst_dut_mem_regbank_r8_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r9
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r9_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd09) begin
                  mem_inst_dut_mem_regbank_r9_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r10
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r10_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd10) begin
                  mem_inst_dut_mem_regbank_r10_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r11
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r11_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd11) begin
                  mem_inst_dut_mem_regbank_r11_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r12
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r12_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd12) begin
                  mem_inst_dut_mem_regbank_r12_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r13
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r13_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd13) begin
                  mem_inst_dut_mem_regbank_r13_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r14
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r14_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd14) begin
                  mem_inst_dut_mem_regbank_r14_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r15
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r15_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd15) begin
                  mem_inst_dut_mem_regbank_r15_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r16
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r16_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd16) begin
                  mem_inst_dut_mem_regbank_r16_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r17
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r17_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd17) begin
                  mem_inst_dut_mem_regbank_r17_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r18
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r18_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd18) begin
                  mem_inst_dut_mem_regbank_r18_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r19
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r19_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd19) begin
                  mem_inst_dut_mem_regbank_r19_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r20
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r20_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd20) begin
                  mem_inst_dut_mem_regbank_r20_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r21
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r21_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd21) begin
                  mem_inst_dut_mem_regbank_r21_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r22
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r22_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd22) begin
                  mem_inst_dut_mem_regbank_r22_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r23
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r23_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd23) begin
                  mem_inst_dut_mem_regbank_r23_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r24
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r24_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd24) begin
                  mem_inst_dut_mem_regbank_r24_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r25
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r25_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd25) begin
                  mem_inst_dut_mem_regbank_r25_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r26
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r26_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd26) begin
                  mem_inst_dut_mem_regbank_r26_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r27
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r27_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd27) begin
                  mem_inst_dut_mem_regbank_r27_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r28
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r28_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd28) begin
                  mem_inst_dut_mem_regbank_r28_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r29
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r29_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd29) begin
                  mem_inst_dut_mem_regbank_r29_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r30
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r30_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd30) begin
                  mem_inst_dut_mem_regbank_r30_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r31
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r31_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd31) begin
                  mem_inst_dut_mem_regbank_r31_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r32
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r32_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd32) begin
                  mem_inst_dut_mem_regbank_r32_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r33
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r33_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd33) begin
                  mem_inst_dut_mem_regbank_r33_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r34
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r34_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd34) begin
                  mem_inst_dut_mem_regbank_r34_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r35
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r35_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd35) begin
                  mem_inst_dut_mem_regbank_r35_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r36
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r36_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd36) begin
                  mem_inst_dut_mem_regbank_r36_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r37
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r37_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd37) begin
                  mem_inst_dut_mem_regbank_r37_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r38
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r38_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd38) begin
                  mem_inst_dut_mem_regbank_r38_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r39
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r39_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd39) begin
                  mem_inst_dut_mem_regbank_r39_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r40
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r40_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd40) begin
                  mem_inst_dut_mem_regbank_r40_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r41
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r41_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd41) begin
                  mem_inst_dut_mem_regbank_r41_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r42
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r42_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd42) begin
                  mem_inst_dut_mem_regbank_r42_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r43
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r43_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd43) begin
                  mem_inst_dut_mem_regbank_r43_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r44
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r44_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd44) begin
                  mem_inst_dut_mem_regbank_r44_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r45
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r45_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd45) begin
                  mem_inst_dut_mem_regbank_r45_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r46
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r46_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd46) begin
                  mem_inst_dut_mem_regbank_r46_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r47
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r47_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd47) begin
                  mem_inst_dut_mem_regbank_r47_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r48
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r48_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd48) begin
                  mem_inst_dut_mem_regbank_r48_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r49
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r49_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd49) begin
                  mem_inst_dut_mem_regbank_r49_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r50
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r50_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd50) begin
                  mem_inst_dut_mem_regbank_r50_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r51
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r51_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd51) begin
                  mem_inst_dut_mem_regbank_r51_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r52
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r52_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd52) begin
                  mem_inst_dut_mem_regbank_r52_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r53
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r53_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd53) begin
                  mem_inst_dut_mem_regbank_r53_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r54
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r54_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd54) begin
                  mem_inst_dut_mem_regbank_r54_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r55
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r55_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd55) begin
                  mem_inst_dut_mem_regbank_r55_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r56
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r56_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd56) begin
                  mem_inst_dut_mem_regbank_r56_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r57
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r57_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd57) begin
                  mem_inst_dut_mem_regbank_r57_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r58
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r58_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd58) begin
                  mem_inst_dut_mem_regbank_r58_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r59
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r59_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd59) begin
                  mem_inst_dut_mem_regbank_r59_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r60
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r60_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd60) begin
                  mem_inst_dut_mem_regbank_r60_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r61
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r61_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd61) begin
                  mem_inst_dut_mem_regbank_r61_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r62
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r62_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd62) begin
                  mem_inst_dut_mem_regbank_r62_slice <= in1_din_wire;
               end
            end
         end

         // resource:dut_mem_regbank  instancemem_inst
         always @(posedge clk)
          begin :write_dut_mem_regbank_r63
            if (rst == 1'b0) begin
               mem_inst_dut_mem_regbank_r63_slice <= 7'd000;
            end
            else begin
               if (mem_if_1_wen0_wire == 1'b1 && in2_waddr_wire == 6'd63) begin
                  mem_inst_dut_mem_regbank_r63_slice <= in1_din_wire;
               end
            end
         end

         // resource: regr_3
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 3'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  global_state <= global_state_next;
               end
            end
         end

         // resource: mux_3bx3i
         always @(dut_LessThan_8Sx8S_1U_4_14_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               3'd0, 3'd1: begin
                  if (dut_LessThan_8Sx8S_1U_4_14_out1) begin
                     global_state_next = 3'd1;
                  end
                  else begin
                     global_state_next = 3'd2;
                  end
               end
               
               3'd4: begin
                  global_state_next = 3'd2;
               end
               
               default: begin
                  global_state_next = global_state + 3'd1;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd0, 3'd1: begin
                        gs_ctrl0 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl0 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd1: begin
                        gs_ctrl1 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl1 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd3: begin
                        gs_ctrl3 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl3 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // thread: drive_din_busy
         assign din_busy = dut_And_1U_3_4_3_out1;

         // resource: dut_Or_1U_0_4  instance: dut_Or_1U_0_4_2
         assign dut_Or_1U_0_4_2_out1 = din_m_unvalidated_req | din_vld;

         // resource: dut_And_1U_3_4  instance: dut_And_1U_3_4_3
         assign dut_And_1U_3_4_3_out1 = dut_Or_1U_0_4_2_out1 & din_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_4
         assign dut_Not_1U_1U_4_4_out1 = !dut_And_1U_3_4_3_out1;

         // resource: dut_And_1U_3_4  instance: dut_And_1U_3_4_5
         assign dut_And_1U_3_4_5_out1 = dut_Not_1U_1U_4_4_out1 & din_vld;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_6
         assign dut_Not_1U_1U_4_6_out1 = !dut_And_1U_3_4_5_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_m_unvalidated_req <= dut_N_Muxb_1_2_7_4_1_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_7_4
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_7_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_7_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_7_4_1_out1 = din_vld;
            end
         end

         // thread: drive_dout_vld
         assign dout_vld = dut_Or_1U_0_4_10_out1;

         // resource: dut_Or_1U_0_4  instance: dut_Or_1U_0_4_10
         assign dut_Or_1U_0_4_10_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_4_9_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= dut_And_1U_3_4_11_out1;
            end
         end

         // resource: dut_And_1U_3_4  instance: dut_And_1U_3_4_11
         assign dut_And_1U_3_4_11_out1 = dout_busy & dout_vld;

         // resource: dut_Xor_1Ux1U_1U_4  instance: dut_Xor_1Ux1U_1U_4_9
         assign dut_Xor_1Ux1U_1U_4_9_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_12
         assign dut_Not_1U_1U_4_12_out1 = !dout_m_req_m_trig_req;

         // thread: thread_12
         assign dout_data = {dout_data_slice[9], dout_data_slice};


endmodule

