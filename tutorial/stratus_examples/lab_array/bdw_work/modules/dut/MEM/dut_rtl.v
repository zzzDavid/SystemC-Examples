// Generated by stratus_hls 17.20-p100  (88533.190925)
// Tue Nov 17 14:07:54 2020
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [10:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_4_9_out1;
      wire dut_Or_1Ux1U_1U_4_10_out1;
      reg dut_N_Muxb_1_2_0_4_1_out1;
      wire dut_And_1Ux1U_1U_4_5_out1;
      wire dut_Not_1U_1U_4_4_out1;
      reg din_m_unvalidated_req;
      wire dut_Or_1Ux1U_1U_4_2_out1;
      wire dut_And_1Ux1U_1U_4_3_out1;
      reg[2:0] global_state_next;
      reg[1:0] gs_ctrl3;
      wire[5:0] dut_Add_6Ux1U_6U_4_15_out1;
      reg[1:0] gs_ctrl1;
      /*signed*/reg[6:0] dut_Add_7Sx2S_8S_4_13_in2;
      reg gs_ctrl0;
      wire dut_Not_1U_1U_4_6_out1;
      wire dut_And_1Ux1U_1U_4_11_out1;
      wire dut_Not_1U_1U_4_12_out1;
      reg dout_m_req_m_trig_req;
      wire dut_LessThan_8Sx8S_1U_4_14_out1;
      reg din_m_busy_req_0;
      wire[8:0] dut_Add_8Ux8U_9U_4_16_out1;
      /*signed*/wire[7:0] dut_Add_7Sx2S_8S_4_13_out1;
      /*signed*/reg[9:0] dout_data_slice;
      reg[2:0] global_state;
      reg stall0;
      reg RAM_64x8_mem_1_1_WE0;
      wire[7:0] RAM_64x8_mem_1_1_DIN0;
      wire[7:0] RAM_64x8_mem_1_1_DOUT0;
      reg[5:0] RAM_64x8_mem_1_1_A0;

         RAM_64x8 RAM_64x8_mem_1_1(
                    .CLK( clk ),
                    .WE0( RAM_64x8_mem_1_1_WE0 ),
                    .DIN0( RAM_64x8_mem_1_1_DIN0 ),
                    .DOUT0( RAM_64x8_mem_1_1_DOUT0 ),
                    .A0( RAM_64x8_mem_1_1_A0 )
                  );

         // resource: mux_10bx4i
         // resource: regr_10
         always @(posedge clk)
          begin :drive_dout_data
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd0, 3'd1: begin
                     dout_data_slice <= {{ 2 {dut_Add_7Sx2S_8S_4_13_out1[7]}}, dut_Add_7Sx2S_8S_4_13_out1};
                  end
                  
                  3'd2: begin
                     dout_data_slice <= {4'b0000, din_data[5:0]};
                  end
                  
                  3'd3: begin
                     dout_data_slice <= {2'b00, RAM_64x8_mem_1_1_DOUT0};
                  end
                  
                  3'd4: begin
                     dout_data_slice <= {1'b0, dut_Add_8Ux8U_9U_4_16_out1};
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     3'd1: begin
                        if (dut_LessThan_8Sx8S_1U_4_14_out1) begin
                        end
                        else begin
                           din_m_busy_req_0 <= 1'd0;
                        end
                     end
                     
                     3'd2: begin
                        din_m_busy_req_0 <= 1'd1;
                     end
                     
                     3'd5: begin
                        din_m_busy_req_0 <= 1'd0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     3'd4: begin
                        dout_m_req_m_trig_req <= dut_Not_1U_1U_4_12_out1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx3i
         always @(dut_Not_1U_1U_4_6_out1 or dut_And_1Ux1U_1U_4_11_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               3'd2: begin
                  stall0 = dut_Not_1U_1U_4_6_out1;
               end
               
               3'd5: begin
                  stall0 = dut_And_1Ux1U_1U_4_11_out1;
               end
               
               default: begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_7bx2i
         always @(gs_ctrl0 or dout_data_slice[6:0])
          begin :drive_dut_Add_7Sx2S_8S_4_13_in2
            if (gs_ctrl0) begin
               dut_Add_7Sx2S_8S_4_13_in2 = dout_data_slice[6:0];
            end
            else begin
               dut_Add_7Sx2S_8S_4_13_in2 = 7'd000;
            end
         end

         // resource: dut_Add_7Sx2S_8S_4  instance: dut_Add_7Sx2S_8S_4_13
         assign dut_Add_7Sx2S_8S_4_13_out1 = {dut_Add_7Sx2S_8S_4_13_in2[6], dut_Add_7Sx2S_8S_4_13_in2} + 8'd001;

         // resource: dut_LessThan_8Sx8S_1U_4  instance: dut_LessThan_8Sx8S_1U_4_14
         assign dut_LessThan_8Sx8S_1U_4_14_out1 = dout_data_slice[7] ^ dout_data_slice[7:0] < 8'd064;

         // resource: mux_6bx3i
         always @(dut_Add_6Ux1U_6U_4_15_out1 or gs_ctrl1 or dout_data_slice[5:0])
          begin :drive_RAM_64x8_mem_1_1_A0
            case (gs_ctrl1) 

               2'd1: begin
                  RAM_64x8_mem_1_1_A0 = dout_data_slice[5:0];
               end
               
               2'd2: begin
                  RAM_64x8_mem_1_1_A0 = dut_Add_6Ux1U_6U_4_15_out1;
               end
               
               default: begin
                  RAM_64x8_mem_1_1_A0 = 6'd00;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         always @(stall0 or dut_LessThan_8Sx8S_1U_4_14_out1 or gs_ctrl3)
          begin :drive_RAM_64x8_mem_1_1_WE0
            if (stall0) begin
               RAM_64x8_mem_1_1_WE0 = 1'd1;
            end
            else begin
               case (gs_ctrl3) 

                  2'd1: begin
                     RAM_64x8_mem_1_1_WE0 = 1'd0;
                  end
                  
                  2'd2: begin
                     if (dut_LessThan_8Sx8S_1U_4_14_out1) begin
                        RAM_64x8_mem_1_1_WE0 = 1'd0;
                     end
                     else begin
                        RAM_64x8_mem_1_1_WE0 = 1'd1;
                     end
                  end
                  
                  default: begin
                     RAM_64x8_mem_1_1_WE0 = 1'd1;
                  end
                  
               endcase

            end
         end

         // resource: dut_Add_6Ux1U_6U_4  instance: dut_Add_6Ux1U_6U_4_15
         assign dut_Add_6Ux1U_6U_4_15_out1 = din_data[5:0] + 6'd01;

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_16
         assign dut_Add_8Ux8U_9U_4_16_out1 = {1'b0, RAM_64x8_mem_1_1_DOUT0} + {1'b0, dout_data_slice[7:0]};

         // resource: regr_3
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 3'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  global_state <= global_state_next;
               end
            end
         end

         // resource: mux_3bx3i
         always @(dut_LessThan_8Sx8S_1U_4_14_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               3'd1: begin
                  if (dut_LessThan_8Sx8S_1U_4_14_out1) begin
                     global_state_next = 3'd1;
                  end
                  else begin
                     global_state_next = global_state + 3'd1;
                  end
               end
               
               3'd5: begin
                  global_state_next = 3'd2;
               end
               
               default: begin
                  global_state_next = global_state + 3'd1;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd1: begin
                        gs_ctrl0 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl0 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 2'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd1, 3'd3: begin
                        gs_ctrl1 <= 2'd1;
                     end
                     
                     3'd2: begin
                        gs_ctrl1 <= 2'd2;
                     end
                     
                     default: begin
                        gs_ctrl1 <= 2'd0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 2'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd0: begin
                        gs_ctrl3 <= 2'd1;
                     end
                     
                     3'd1: begin
                        gs_ctrl3 <= 2'd2;
                     end
                     
                     default: begin
                        gs_ctrl3 <= 2'd0;
                     end
                     
                  endcase

               end
            end
         end

         // thread: drive_din_busy
         assign din_busy = dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_2
         assign dut_Or_1Ux1U_1U_4_2_out1 = din_m_unvalidated_req | din_vld;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_3
         assign dut_And_1Ux1U_1U_4_3_out1 = dut_Or_1Ux1U_1U_4_2_out1 & din_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_4
         assign dut_Not_1U_1U_4_4_out1 = !dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_5
         assign dut_And_1Ux1U_1U_4_5_out1 = dut_Not_1U_1U_4_4_out1 & din_vld;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_6
         assign dut_Not_1U_1U_4_6_out1 = !dut_And_1Ux1U_1U_4_5_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_m_unvalidated_req <= dut_N_Muxb_1_2_0_4_1_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_0_4
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_0_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_vld;
            end
         end

         // thread: drive_dout_vld
         assign dout_vld = dut_Or_1Ux1U_1U_4_10_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_10
         assign dut_Or_1Ux1U_1U_4_10_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_4_9_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= dut_And_1Ux1U_1U_4_11_out1;
            end
         end

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_11
         assign dut_And_1Ux1U_1U_4_11_out1 = dout_busy & dout_vld;

         // resource: dut_Xor_1Ux1U_1U_4  instance: dut_Xor_1Ux1U_1U_4_9
         assign dut_Xor_1Ux1U_1U_4_9_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_12
         assign dut_Not_1U_1U_4_12_out1 = !dout_m_req_m_trig_req;

         // thread: thread_13
         assign RAM_64x8_mem_1_1_DIN0 = {dut_Add_7Sx2S_8S_4_13_in2[6], dut_Add_7Sx2S_8S_4_13_in2};

         // thread: thread_12
         assign dout_data = {dout_data_slice[9], dout_data_slice};


endmodule

