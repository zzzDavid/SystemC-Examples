// Generated by stratus_hls 17.20-p100  (88533.190925)
// Tue Nov 17 22:53:51 2020
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [10:0] dout_data;
      reg [10:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_4_9_out1;
      wire dut_Or_1Ux1U_1U_4_10_out1;
      reg dut_N_Muxb_1_2_0_4_1_out1;
      wire dut_And_1Ux1U_1U_4_5_out1;
      wire dut_Not_1U_1U_4_4_out1;
      reg din_m_unvalidated_req;
      wire dut_Or_1Ux1U_1U_4_2_out1;
      wire dut_And_1Ux1U_1U_4_3_out1;
      reg[5:0] global_state_next;
      reg[10:0] dut_Add_11Ux8U_11U_4_14_in2;
      reg gs_ctrl4;
      reg gs_ctrl3;
      reg gs_ctrl2;
      reg[1:0] gs_ctrl1;
      reg[2:0] gs_ctrl0;
      wire dut_Not_1U_1U_4_6_out1;
      wire dut_And_1Ux1U_1U_4_11_out1;
      wire dut_Not_1U_1U_4_12_out1;
      reg dout_m_req_m_trig_req;
      reg din_m_busy_req_0;
      wire[10:0] dut_Add_11Ux8U_11U_4_14_out1;
      wire[8:0] dut_Add_8Ux8U_9U_4_13_out1;
      reg[5:0] global_state;
      reg stall0;
      reg[7:0] dut_RAM_8X8_1_my_array_1_DIN;
      reg dut_RAM_8X8_1_my_array_1_CE;
      reg dut_RAM_8X8_1_my_array_1_RW;
      reg[2:0] dut_RAM_8X8_1_my_array_1_in1;
      wire[7:0] dut_RAM_8X8_1_my_array_1_out1;

         dut_RAM_8X8_1 dut_RAM_8X8_1_my_array_1(
                         .DIN( dut_RAM_8X8_1_my_array_1_DIN ),
                         .CE( dut_RAM_8X8_1_my_array_1_CE ),
                         .RW( dut_RAM_8X8_1_my_array_1_RW ),
                         .in1( dut_RAM_8X8_1_my_array_1_in1 ),
                         .out1( dut_RAM_8X8_1_my_array_1_out1 ),
                         .clk( clk )
                       );

         // resource: mux_11bx6i
         // resource: regr_11
         always @(posedge clk)
          begin :drive_dout_data
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  6'd01, 6'd11: begin
                     dout_data <= {3'b000, din_data};
                  end
                  
                  6'd27: begin
                     dout_data <= {3'b000, dut_RAM_8X8_1_my_array_1_out1};
                  end
                  
                  6'd28: begin
                     dout_data <= {2'b00, dut_Add_8Ux8U_9U_4_13_out1};
                  end
                  
                  6'd29: begin
                     dout_data <= {1'b0, dut_Add_11Ux8U_11U_4_14_out1[9:0]};
                  end
                  
                  6'd30, 6'd31, 6'd32, 6'd33: begin
                     dout_data <= dut_Add_11Ux8U_11U_4_14_out1;
                  end
                  
                  6'd34: begin
                     dout_data <= {3'b000, dut_Add_11Ux8U_11U_4_14_out1[10:3]};
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     6'd00, 6'd10, 6'd35: begin
                        din_m_busy_req_0 <= 1'd0;
                     end
                     
                     6'd01, 6'd11: begin
                        din_m_busy_req_0 <= 1'd1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     6'd09, 6'd34: begin
                        dout_m_req_m_trig_req <= dut_Not_1U_1U_4_12_out1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx3i
         always @(dut_Not_1U_1U_4_6_out1 or dut_And_1Ux1U_1U_4_11_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               6'd01, 6'd11: begin
                  stall0 = dut_Not_1U_1U_4_6_out1;
               end
               
               6'd10, 6'd35: begin
                  stall0 = dut_And_1Ux1U_1U_4_11_out1;
               end
               
               default: begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_3bx8i
         always @(gs_ctrl0)
          begin :drive_dut_RAM_8X8_1_my_array_1_in1
            case (gs_ctrl0) 

               3'd1: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd1;
               end
               
               3'd2: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd2;
               end
               
               3'd3: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd3;
               end
               
               3'd4: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd4;
               end
               
               3'd5: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd5;
               end
               
               3'd6: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd6;
               end
               
               3'd7: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd7;
               end
               
               default: begin
                  dut_RAM_8X8_1_my_array_1_in1 = 3'd0;
               end
               
            endcase

         end

         // resource: mux_8bx3i
         always @(dout_data[7:0] or din_data or dut_RAM_8X8_1_my_array_1_out1 or gs_ctrl1)
          begin :drive_dut_RAM_8X8_1_my_array_1_DIN
            case (gs_ctrl1) 

               2'd1: begin
                  dut_RAM_8X8_1_my_array_1_DIN = dout_data[7:0];
               end
               
               2'd2: begin
                  dut_RAM_8X8_1_my_array_1_DIN = dut_RAM_8X8_1_my_array_1_out1;
               end
               
               default: begin
                  dut_RAM_8X8_1_my_array_1_DIN = din_data;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         always @(stall0 or gs_ctrl2)
          begin :drive_dut_RAM_8X8_1_my_array_1_CE
            if (stall0) begin
               dut_RAM_8X8_1_my_array_1_CE = 1'b0;
            end
            else begin
               if (gs_ctrl2) begin
                  dut_RAM_8X8_1_my_array_1_CE = 1'b1;
               end
               else begin
                  dut_RAM_8X8_1_my_array_1_CE = 1'b0;
               end
            end
         end

         // resource: mux_1bx2i
         always @(stall0 or gs_ctrl3)
          begin :drive_dut_RAM_8X8_1_my_array_1_RW
            if (stall0) begin
               dut_RAM_8X8_1_my_array_1_RW = 1'b0;
            end
            else begin
               if (gs_ctrl3) begin
                  dut_RAM_8X8_1_my_array_1_RW = 1'b1;
               end
               else begin
                  dut_RAM_8X8_1_my_array_1_RW = 1'b0;
               end
            end
         end

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_13
         assign dut_Add_8Ux8U_9U_4_13_out1 = {1'b0, dut_RAM_8X8_1_my_array_1_out1} + {1'b0, dout_data[7:0]};

         // resource: mux_11bx2i
         always @(dout_data or gs_ctrl4)
          begin :drive_dut_Add_11Ux8U_11U_4_14_in2
            if (gs_ctrl4) begin
               dut_Add_11Ux8U_11U_4_14_in2 = {1'b0, dout_data[9:0]};
            end
            else begin
               dut_Add_11Ux8U_11U_4_14_in2 = dout_data;
            end
         end

         // resource: dut_Add_11Ux8U_11U_4  instance: dut_Add_11Ux8U_11U_4_14
         assign dut_Add_11Ux8U_11U_4_14_out1 = dut_Add_11Ux8U_11U_4_14_in2 + {3'b000, dut_RAM_8X8_1_my_array_1_out1};

         // resource: regr_6
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 6'd00;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  global_state <= global_state_next;
               end
            end
         end

         // resource: mux_6bx2i
         always @(global_state)
          begin :drive_global_state_next
            case (global_state) 

               6'd10, 6'd35: begin
                  global_state_next = 6'd11;
               end
               
               default: begin
                  global_state_next = global_state + 6'd01;
               end
               
            endcase

         end

         // resource: mux_3bx8i
         // resource: regr_3
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 3'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     6'd02, 6'd11, 6'd14, 6'd26: begin
                        gs_ctrl0 <= 3'd1;
                     end
                     
                     6'd03, 6'd13, 6'd16, 6'd28: begin
                        gs_ctrl0 <= 3'd2;
                     end
                     
                     6'd04, 6'd15, 6'd18, 6'd29: begin
                        gs_ctrl0 <= 3'd3;
                     end
                     
                     6'd05, 6'd17, 6'd20, 6'd30: begin
                        gs_ctrl0 <= 3'd4;
                     end
                     
                     6'd06, 6'd19, 6'd22, 6'd31: begin
                        gs_ctrl0 <= 3'd5;
                     end
                     
                     6'd07, 6'd21, 6'd24, 6'd32: begin
                        gs_ctrl0 <= 3'd6;
                     end
                     
                     6'd08, 6'd23, 6'd25, 6'd33: begin
                        gs_ctrl0 <= 3'd7;
                     end
                     
                     default: begin
                        gs_ctrl0 <= 3'd0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 2'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     6'd02, 6'd03, 6'd04, 6'd05, 6'd06, 6'd07, 6'd08, 6'd25: begin
                        gs_ctrl1 <= 2'd1;
                     end
                     
                     6'd12, 6'd14, 6'd16, 6'd18, 6'd20, 6'd22, 6'd24: begin
                        gs_ctrl1 <= 2'd2;
                     end
                     
                     default: begin
                        gs_ctrl1 <= 2'd0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl2
            if (rst == 1'b0) begin
               gs_ctrl2 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     6'd01, 6'd02, 6'd03, 6'd04, 6'd05, 6'd06, 6'd07, 6'd08, 6'd11, 6'd12, 6'd13, 6'd14, 6'd15, 6'd16, 6'd17, 6'd18, 6'd19, 6'd20, 6'd21, 6'd22, 6'd23, 6'd24, 6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32, 6'd33: begin
                        gs_ctrl2 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl2 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     6'd01, 6'd02, 6'd03, 6'd04, 6'd05, 6'd06, 6'd07, 6'd08, 6'd12, 6'd14, 6'd16, 6'd18, 6'd20, 6'd22, 6'd24, 6'd25: begin
                        gs_ctrl3 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl3 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl4
            if (rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     6'd31: begin
                        gs_ctrl4 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl4 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // thread: drive_din_busy
         assign din_busy = dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_2
         assign dut_Or_1Ux1U_1U_4_2_out1 = din_m_unvalidated_req | din_vld;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_3
         assign dut_And_1Ux1U_1U_4_3_out1 = dut_Or_1Ux1U_1U_4_2_out1 & din_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_4
         assign dut_Not_1U_1U_4_4_out1 = !dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_5
         assign dut_And_1Ux1U_1U_4_5_out1 = dut_Not_1U_1U_4_4_out1 & din_vld;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_6
         assign dut_Not_1U_1U_4_6_out1 = !dut_And_1Ux1U_1U_4_5_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_m_unvalidated_req <= dut_N_Muxb_1_2_0_4_1_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_0_4
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_0_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_vld;
            end
         end

         // thread: drive_dout_vld
         assign dout_vld = dut_Or_1Ux1U_1U_4_10_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_10
         assign dut_Or_1Ux1U_1U_4_10_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_4_9_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= dut_And_1Ux1U_1U_4_11_out1;
            end
         end

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_11
         assign dut_And_1Ux1U_1U_4_11_out1 = dout_busy & dout_vld;

         // resource: dut_Xor_1Ux1U_1U_4  instance: dut_Xor_1Ux1U_1U_4_9
         assign dut_Xor_1Ux1U_1U_4_9_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_12
         assign dut_Not_1U_1U_4_12_out1 = !dout_m_req_m_trig_req;


endmodule

