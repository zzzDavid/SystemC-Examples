// Generated by stratus_hls 17.20-p100  (88533.190925)
// Wed Nov 18 11:36:15 2020
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data_a, din_data_b, din_data_c, din_data_d, din_data_e, din_data_f, din_data_g, din_data_h, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data_a;
      input [7:0] din_data_b;
      input [7:0] din_data_c;
      input [7:0] din_data_d;
      input [7:0] din_data_e;
      input [7:0] din_data_f;
      input [7:0] din_data_g;
      input [7:0] din_data_h;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [31:0] dout_data;
      reg [31:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_4_9_out1;
      wire dut_Or_1Ux1U_1U_4_10_out1;
      reg dut_N_Muxb_1_2_0_4_1_out1;
      wire dut_And_1Ux1U_1U_4_5_out1;
      wire dut_Not_1U_1U_4_4_out1;
      reg din_m_unvalidated_req;
      wire dut_Or_1Ux1U_1U_4_2_out1;
      wire dut_And_1Ux1U_1U_4_3_out1;
      reg[2:0] global_state_next;
      wire[31:0] dut_Add_32Ux32U_32U_1_19_out1;
      reg[31:0] dut_Mul_32Ux32U_32U_4_15_in1;
      reg gs_ctrl0;
      wire[19:0] dut_Mul2Add3u8u8u8Add3u8u8u8_1_14_out1;
      wire[8:0] dut_Add_8Ux8U_9U_4_13_out1;
      wire[15:0] dut_Mul_8Ux8U_16U_4_16_out1;
      reg[15:0] s_reg_20;
      wire[31:0] dut_Add2Mul2u29Add2u8u8Mul2u32Add2u8u8_1_21_out1;
      wire[28:0] dut_Mul_20Ux9U_29U_1_23_out1;
      reg[31:0] s_reg_19;
      wire[16:0] dut_Add2Mul2u8u8Mul2u8u8_4_17_out1;
      reg[16:0] s_reg_18;
      reg[7:0] s_reg_17;
      reg[7:0] s_reg_16;
      reg[7:0] s_reg_15;
      reg[7:0] s_reg_14;
      wire dut_Not_1U_1U_4_6_out1;
      wire dut_And_1Ux1U_1U_4_11_out1;
      wire dut_Not_1U_1U_4_12_out1;
      reg dout_m_req_m_trig_req;
      reg din_m_busy_req_0;
      wire[31:0] dut_Add_32Ux16U_32U_4_20_out1;
      wire[31:0] dut_Mul_32Ux32U_32U_4_15_out1;
      reg[2:0] global_state;
      reg stall0;

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_dout_data
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd2, 3'd4: begin
                     dout_data <= dut_Mul_32Ux32U_32U_4_15_out1;
                  end
                  
                  3'd3: begin
                     dout_data <= dut_Add_32Ux16U_32U_4_20_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     3'd0, 3'd5: begin
                        din_m_busy_req_0 <= 1'd0;
                     end
                     
                     3'd1: begin
                        din_m_busy_req_0 <= 1'd1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state) 

                     3'd4: begin
                        dout_m_req_m_trig_req <= dut_Not_1U_1U_4_12_out1;
                     end
                     
                  endcase

               end
            end
         end

         // resource: mux_1bx3i
         always @(dut_Not_1U_1U_4_6_out1 or dut_And_1Ux1U_1U_4_11_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               3'd1: begin
                  stall0 = dut_Not_1U_1U_4_6_out1;
               end
               
               3'd5: begin
                  stall0 = dut_And_1Ux1U_1U_4_11_out1;
               end
               
               default: begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_14
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_14 <= din_data_a;
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_15
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_15 <= din_data_b;
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_16
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_16 <= din_data_c;
                  end
                  
               endcase

            end
         end

         // resource: regr_8
         always @(posedge clk)
          begin :drive_s_reg_17
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_17 <= din_data_d;
                  end
                  
               endcase

            end
         end

         // resource: mux_17bx2i
         // resource: regr_17
         always @(posedge clk)
          begin :drive_s_reg_18
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_18 <= {9'b000000000, din_data_e};
                  end
                  
                  3'd2: begin
                     s_reg_18 <= dut_Add2Mul2u8u8Mul2u8u8_4_17_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_19
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_19 <= {3'b000, dut_Mul_20Ux9U_29U_1_23_out1};
                  end
                  
                  3'd3: begin
                     s_reg_19 <= dut_Add2Mul2u29Add2u8u8Mul2u32Add2u8u8_1_21_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_16
         always @(posedge clk)
          begin :drive_s_reg_20
            if (stall0) begin
            end
            else begin
               case (global_state) 

                  3'd1: begin
                     s_reg_20 <= dut_Mul_8Ux8U_16U_4_16_out1;
                  end
                  
               endcase

            end
         end

         // resource: dut_Add_8Ux8U_9U_4  instance: dut_Add_8Ux8U_9U_4_13
         assign dut_Add_8Ux8U_9U_4_13_out1 = {1'b0, din_data_g} + {1'b0, din_data_h};

         // resource: dut_Mul2Add3u8u8u8Add3u8u8u8_1  instance: dut_Mul2Add3u8u8u8Add3u8u8u8_1_14
         assign dut_Mul2Add3u8u8u8Add3u8u8u8_1_14_out1 = ({12'b000000000000, din_data_a} + {12'b000000000000, din_data_b} + {12'b000000000000, din_data_c})*({12'b000000000000, din_data_d} + {12'b000000000000, din_data_e} + {12'b000000000000, din_data_f});

         // resource: dut_Mul_20Ux9U_29U_1  instance: dut_Mul_20Ux9U_29U_1_23
         assign dut_Mul_20Ux9U_29U_1_23_out1 = {9'b000000000, dut_Mul2Add3u8u8u8Add3u8u8u8_1_14_out1}*{20'b00000000000000000000, dut_Add_8Ux8U_9U_4_13_out1};

         // resource: dut_Mul_8Ux8U_16U_4  instance: dut_Mul_8Ux8U_16U_4_16
         assign dut_Mul_8Ux8U_16U_4_16_out1 = {8'b00000000, din_data_g}*{8'b00000000, din_data_h};

         // resource: dut_Add2Mul2u8u8Mul2u8u8_4  instance: dut_Add2Mul2u8u8Mul2u8u8_4_17
         assign dut_Add2Mul2u8u8Mul2u8u8_4_17_out1 = {9'b000000000, s_reg_14}*{9'b000000000, s_reg_15} + {9'b000000000, s_reg_16}*{9'b000000000, s_reg_17};

         // resource: mux_32bx2i
         always @(dout_data or s_reg_18 or gs_ctrl0)
          begin :drive_dut_Mul_32Ux32U_32U_4_15_in1
            if (gs_ctrl0) begin
               dut_Mul_32Ux32U_32U_4_15_in1 = dout_data;
            end
            else begin
               dut_Mul_32Ux32U_32U_4_15_in1 = {15'b000000000000000, s_reg_18};
            end
         end

         // resource: dut_Mul_32Ux32U_32U_4  instance: dut_Mul_32Ux32U_32U_4_15
         assign dut_Mul_32Ux32U_32U_4_15_out1 = s_reg_19*dut_Mul_32Ux32U_32U_4_15_in1;

         // resource: dut_Add_32Ux32U_32U_1  instance: dut_Add_32Ux32U_32U_1_19
         assign dut_Add_32Ux32U_32U_1_19_out1 = dout_data + {15'b000000000000000, s_reg_18};

         // resource: dut_Add_32Ux16U_32U_4  instance: dut_Add_32Ux16U_32U_4_20
         assign dut_Add_32Ux16U_32U_4_20_out1 = dut_Add_32Ux32U_32U_1_19_out1 + {16'b0000000000000000, s_reg_20};

         // resource: dut_Add2Mul2u29Add2u8u8Mul2u32Add2u8u8_1  instance: dut_Add2Mul2u29Add2u8u8Mul2u32Add2u8u8_1_21
         assign dut_Add2Mul2u29Add2u8u8Mul2u32Add2u8u8_1_21_out1 = ({24'b000000000000000000000000, s_reg_14} + {24'b000000000000000000000000, s_reg_15})*dut_Add_32Ux32U_32U_1_19_out1 + ({24'b000000000000000000000000, s_reg_16} + {24'b000000000000000000000000, s_reg_17})*{3'b000, s_reg_19[28:0]};

         // resource: regr_3
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 3'd0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  global_state <= global_state_next;
               end
            end
         end

         // resource: mux_3bx2i
         always @(global_state)
          begin :drive_global_state_next
            case (global_state) 

               3'd0, 3'd5: begin
                  global_state_next = 3'd1;
               end
               
               default: begin
                  global_state_next = global_state + 3'd1;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               if (stall0) begin
               end
               else begin
                  case (global_state_next) 

                     3'd4: begin
                        gs_ctrl0 <= 1'b1;
                     end
                     
                     default: begin
                        gs_ctrl0 <= 1'b0;
                     end
                     
                  endcase

               end
            end
         end

         // thread: drive_din_busy
         assign din_busy = dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_2
         assign dut_Or_1Ux1U_1U_4_2_out1 = din_m_unvalidated_req | din_vld;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_3
         assign dut_And_1Ux1U_1U_4_3_out1 = dut_Or_1Ux1U_1U_4_2_out1 & din_m_busy_req_0;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_4
         assign dut_Not_1U_1U_4_4_out1 = !dut_And_1Ux1U_1U_4_3_out1;

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_5
         assign dut_And_1Ux1U_1U_4_5_out1 = dut_Not_1U_1U_4_4_out1 & din_vld;

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_6
         assign dut_Not_1U_1U_4_6_out1 = !dut_And_1Ux1U_1U_4_5_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_m_unvalidated_req <= dut_N_Muxb_1_2_0_4_1_out1;
            end
         end

         // resource:dut_N_Muxb_1_2_0_4
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_0_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_0_4_1_out1 = din_vld;
            end
         end

         // thread: drive_dout_vld
         assign dout_vld = dut_Or_1Ux1U_1U_4_10_out1;

         // resource: dut_Or_1Ux1U_1U_4  instance: dut_Or_1Ux1U_1U_4_10
         assign dut_Or_1Ux1U_1U_4_10_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_4_9_out1;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= dut_And_1Ux1U_1U_4_11_out1;
            end
         end

         // resource: dut_And_1Ux1U_1U_4  instance: dut_And_1Ux1U_1U_4_11
         assign dut_And_1Ux1U_1U_4_11_out1 = dout_busy & dout_vld;

         // resource: dut_Xor_1Ux1U_1U_4  instance: dut_Xor_1Ux1U_1U_4_9
         assign dut_Xor_1Ux1U_1U_4_9_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // resource: dut_Not_1U_1U_4  instance: dut_Not_1U_1U_4_12
         assign dut_Not_1U_1U_4_12_out1 = !dout_m_req_m_trig_req;


endmodule

